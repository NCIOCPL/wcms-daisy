using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Drawing;
using System.ComponentModel;
using System.Data;


namespace NCI.Web.UI.WebControls
{
    /// <summary>
    /// Custom Sorting gridview can do two things:
    /// 1. Header will be clickable instead of the link
    /// 2. When sorting, a background change shows which column is sorted
    /// Usage:
    /// 1. Need to define sortexpression for each column
    /// 2. Has to create each column. Doesn't work for AllowAutoGeneratedColumn=true
    /// 3. Detail usaged please see the commented-out code
    /// 4. Property SortColor defines the sorted background color for the column header. User can 
    /// define theirs own color.
    /// 5. Property HeaderPadding defines the padding-top and padding-bottom of the anchor inside 
    /// the column header. 
    /// User should use it to make the anchor clickable field occupying the full area of its header cell.
    /// </summary>
    public class CustomSortingGridView : GridView
    {
        #region private variables
        private const string ascStr = " ASC ";
        private const string descStr = " DESC ";
        private const string sortColor = "#d7e3f1";
        private const string headerPadding = "5px";
        #endregion

        #region public Constructors
        /// <summary>
        /// Initializes a new instance of the DataControlField class.
        /// </summary>
        public CustomSortingGridView()
            : base()
        {
            this.AllowSorting = false;
            this.PagerSettings.Mode = PagerButtons.NumericFirstLast;
        }
        #endregion

        #region Custom properties
        /// <summary>
        /// Get/Set the order by string to use for this grid when sorting event is triggered
        /// </summary>
        [Browsable(true), Category("NewDynamic")]
        [Description("Get/Set the order by string to use for this grid when sorting event is triggered")]
        public string SortColor
        {
            get
            {
                if (ViewState["SortColor"] != null)
                {
                    return ViewState["SortColor"].ToString();
                }
                else
                {
                    return sortColor;
                }
            }
            set { ViewState["SortColor"] = value; }
        }

        /// <summary>
        /// Get/Set header top and bottom Padding
        /// </summary>
        [Browsable(true), Category("NewDynamic")]
        [Description("Get/Set header top and bottom Padding")]
        public string HeaderPadding
        {
            get
            {
                if (ViewState["headerPadding"] != null)
                {
                    return ViewState["headerPadding"].ToString();
                }
                else
                {
                    return headerPadding;
                }
            }
            set { ViewState["headerPadding"] = value; }
        }

        /// <summary>
        /// Set the virtual item count for this grid. Default to -1
        /// </summary>
        [Browsable(true), Category("NewDynamic")]
        [Description("Set the virtual item count for this grid")]
        public int VirtualItemCount
        {
            get
            {
                if (ViewState["pgv_vitemcount"] == null)
                    ViewState["pgv_vitemcount"] = -1;
                return Convert.ToInt32(ViewState["pgv_vitemcount"]);
            }
            set
            {
                ViewState["pgv_vitemcount"] = value;
            }
        }

        /// <summary>
        /// Gets or sets Current Page Index
        /// </summary>
        private int CurrentPageIndex
        {
            get
            {
                if (ViewState["pgv_pageindex"] == null)
                    ViewState["pgv_pageindex"] = 0;
                return Convert.ToInt32(ViewState["pgv_pageindex"]);
            }
            set
            {
                ViewState["pgv_pageindex"] = value;
            }
        }

        /// <summary>
        /// Gets whether Custom Paging is true or not
        /// </summary>
        private bool CustomPaging
        {
            get
            {
                return (VirtualItemCount != -1);
            }
        }

        /// <summary>
        /// Get/Set the order by string to use for this grid when sorting event is triggered
        /// </summary>
        [Browsable(true), Category("NewDynamic")]
        [Description("Get/Set the order by string to use for this grid when sorting event is triggered")]
        public string CustSortExpression
        {
            get
            {
                if (ViewState["CustSortExpression"] != null)
                {
                    return ViewState["CustSortExpression"].ToString();
                }
                else
                {
                    return String.Empty;
                }
            }
            set { ViewState["CustSortExpression"] = value; }
        }


        #endregion

        #region Overriding the parent methods
        /// <summary>
        /// Gets or sets data source
        /// </summary>
        public override object DataSource
        {
            get
            {
                return base.DataSource;
            }
            set
            {
                base.DataSource = value;
                // we store the page index here so we dont lost it in databind
                CurrentPageIndex = PageIndex;
            }
        }

        /// <summary>
        /// Create sort image in header row
        /// </summary>
        /// <param name="e"></param>
        protected override void OnRowCreated(GridViewRowEventArgs e)
        {
            base.OnRowCreated(e);
            if (e.Row.RowType == DataControlRowType.Header) 
            {
                CreateHeader(e.Row);
            }
            //else if (e.Row.RowType == DataControlRowType.DataRow)
            //{
            //    CreateRowBackground(e.Row);
            //}
        }


        /// <summary>
        /// This method is called to initialise the pager on the grid. We intercepted this and override
        /// the values of pagedDataSource to achieve the custom paging using the default pager supplied
        /// </summary>
        /// <param name="row"></param>
        /// <param name="columnSpan"></param>
        /// <param name="pagedDataSource"></param>
        protected override void InitializePager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource)
        {
            if (CustomPaging)
            {
                pagedDataSource.AllowCustomPaging = true;
                pagedDataSource.VirtualCount = VirtualItemCount;
                pagedDataSource.CurrentPageIndex = CurrentPageIndex;
            }
            base.InitializePager(row, columnSpan, pagedDataSource);
        }



        /// <summary>
        /// Custom sorting
        /// </summary>
        /// <param name="e"></param>
        protected override void OnSorting(GridViewSortEventArgs e)
        {
            SetCustomSortExpression(e);
            GridViewSortEventHandler handler = (GridViewSortEventHandler)base.Events["Sorting"];
            if (handler != null)
            {
                handler(this, e);
            }

        }

      
        /// <summary>
        /// Hide sorting handler
        /// </summary>
        public new event GridViewSortEventHandler Sorting
        {
            add
            {
                base.Events.AddHandler("Sorting", value);
            }
            remove
            {
                base.Events.RemoveHandler("Sorting", value);
            }
        }
#endregion

        #region Custom sorting/paging helper class
        /// <summary>
        /// Create new header's style
        /// </summary>
        /// <param name="gridViewRow"></param>
        protected void CreateHeader(GridViewRow gridViewRow)
        {
            for (int i = 0; i < this.Columns.Count; i++)
            {
                string sortExpression = this.Columns[i].SortExpression;
                TableCell tableCell = gridViewRow.Cells[i];
                //tableCell.CssClass = "GridHeader"; 

                //Make sure the column we are working with has a sort expression
                if (!string.IsNullOrEmpty(sortExpression) && tableCell.Controls.Count > 0)
                {
                    LinkButton linkButton = tableCell.Controls[0] as LinkButton;
                    if (linkButton != null)
                    {
                        linkButton.Style.Add("width", "100%");
                        linkButton.Style.Add("display", "inline-block");
                        linkButton.Style.Add("text-decoration", "none");
                        linkButton.Style.Add("padding-bottom", this.HeaderPadding);
                        linkButton.Style.Add("padding-top", this.HeaderPadding);
                    }
                    if ((!String.IsNullOrEmpty(CustSortExpression)) && (CustSortExpression.StartsWith(sortExpression)))
                    {
                        Style a = new Style();
                        Color b = ColorTranslator.FromHtml(this.SortColor);

                        a.BackColor = b;
                        tableCell.ApplyStyle(a);
                        //tableCell.CssClass = "GridHeader GridHeader-Active";
                    }
                    tableCell.Style.Add(HtmlTextWriterStyle.Cursor, "hand");
                    tableCell.Style.Add(HtmlTextWriterStyle.Cursor, "pointer");

                    tableCell.Wrap = false;
                }              
            }
        }

        /// <summary>
        /// Create active sorted row background
        /// </summary>
        /// <param name="gridViewRow"></param>
        protected void CreateRowBackground(GridViewRow gridViewRow)
        {
            if (gridViewRow.RowType == DataControlRowType.DataRow)
            {
                for (int i = 0; i < gridViewRow.Cells.Count; i++)
                {
                    if ((!String.IsNullOrEmpty(CustSortExpression)) && !String.IsNullOrEmpty(this.Columns[i].SortExpression) && (CustSortExpression.StartsWith(this.Columns[i].SortExpression)))
                    {
                        Color sortColumnBgColor;

                        sortColumnBgColor = (gridViewRow.RowState != DataControlRowState.Alternate) ?
                                        ColorTranslator.FromHtml("#d7e3f1") : ColorTranslator.FromHtml("#f7fbff");

                        gridViewRow.Cells[i].BackColor = sortColumnBgColor;
                    }
                }
            }
        }

        /// <summary>
        /// Get sort expression and direction into a string as orderby 
        /// </summary>
        /// <param name="e"></param>
        /// <returns></returns>
        private void SetCustomSortExpression(GridViewSortEventArgs e)
        {
            string sortExpression = e.SortExpression.ToString();
            if (!CustSortExpression.Contains(sortExpression)) //First click on a column
            {
                CustSortExpression = String.Concat(sortExpression, ascStr);
            }
            else //clicks more than once 
            {
                if (CustSortExpression.Contains(ascStr))
                {
                    CustSortExpression = String.Concat(sortExpression, descStr);
                }
                else
                {
                    CustSortExpression = String.Concat(sortExpression, ascStr);
                }
            }
        }

        /// <summary>
        /// REturn a collection of dropdown selected value
        /// </summary>
        /// <param name="headerName"></param>
        /// <returns></returns>
        public NameValueCollection GetDropDownValues(string headerName)
        {
            NameValueCollection result = new NameValueCollection();
            foreach (GridViewRow row in Rows)
            {
                if (row.RowType == DataControlRowType.DataRow)
                {
                    DropDownList ddl = row.FindControl(DropDownBoundField.DropDownID + headerName) as DropDownList;
                    if ((ddl != null) && (this.DataKeys != null) && (this.DataKeys.Count > 0) && (row.RowIndex < this.DataKeys.Count))
                    {
                        result.Add(this.DataKeys[row.RowIndex].Value.ToString(), ddl.SelectedValue);
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Get default checkbox related datakey value
        /// </summary>
        /// <returns></returns>
        public ArrayList GetCheckBoxValues()
        {
            ArrayList cachedSelectedIndices = new ArrayList();
            foreach (GridViewRow row in Rows)
            {
                if (row.RowType == DataControlRowType.DataRow)
                {
                    // Retrieve the reference to the checkbox
                    CheckBox cb = row.FindControl(CheckBoxBoundField.CheckBoxID) as CheckBox;
                    if (cb == null)
                        return cachedSelectedIndices;
                    if (cb.Checked)
                        cachedSelectedIndices.Add(this.DataKeys[row.RowIndex].Value.ToString());
                }
            }
            return cachedSelectedIndices;
        }
        /// <summary>
        /// Remove unnecessary rows in the last page. We cheat here.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            if (this.CurrentPageIndex == this.PageCount - 1)
            {
                int lastPageTotal = this.VirtualItemCount - this.CurrentPageIndex * this.PageSize;
                foreach (GridViewRow r in Rows)
                {
                    if (r.RowIndex > lastPageTotal - 1)
                    {
                        r.Visible = false;
                    }
                }
            }
        }
        #endregion
    }
    #region Usage
    /*
    protected void Page_Load(object sender, EventArgs e)
    {
        CreatePanel2();
    }
     
    private void CreatePanel2()
    {
        CollapsiblePanel CollapsiblePanel2 = new CollapsiblePanel();
        this.form1.Controls.Add(CollapsiblePanel2);

        MenuLinkButton BtnBack = new MenuLinkButton();
        BtnBack.ButtonText = "Back to List2";
        BtnBack.Url = "home.aspx";

        MenuLinkButton BtnSave = new MenuLinkButton();
        BtnSave.ButtonText = "Add new 2";
        BtnSave.Url = "addnew.aspx";
        //CollapsiblePanel2.MenuBar.MenuStyle = MenuControl.MenuStyles.Reverse;
        CollapsiblePanel2.MenuBar.Controls.Add(BtnBack);
        CollapsiblePanel2.MenuBar.Controls.Add(BtnSave);

        //PagingGridView1 = new GridView();
        CollapsiblePanel2.ActionControl = PagingGridView2;
        PagingGridView2.ID = "test";
        PagingGridView2.Columns.Clear();
        PagingGridView2.AllowSorting = true;
        PagingGridView2.PageIndexChanging += PagingGridView2_PageIndexChanging;
        PagingGridView2.Sorting += PagingGridView2_Sorting;
        PagingGridView2.AutoGenerateColumns = false;
        PagingGridView2.AllowPaging = true;
        PagingGridView2.VirtualItemCount = -1;
        PagingGridView2.PageSize = 6;
        BoundField a = new BoundField();
        a.DataField = "FirstName";
        a.SortExpression = "FirstName";
        a.HeaderText = "FirstName";
        PagingGridView2.Columns.Add(a);
        a = new BoundField();
        a.DataField = "LastName";
        a.SortExpression = "LastName";
        a.HeaderText = "LastName";
        PagingGridView2.Columns.Add(a);
        a = new BoundField();
        a.DataField = "Organization";
        a.SortExpression = "Organization";
        a.HeaderText = "Organization";
        PagingGridView2.Columns.Add(a);
        PagingGridView2.VirtualItemCount = GetRowCount();
        BindPagingGrid2();
    }

    protected void PagingGridView2_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        PagingGridView2.PageIndex = e.NewPageIndex;
        BindPagingGrid2();
    }

    protected void PagingGridView2_Sorting(object sender, GridViewSortEventArgs e)
    {
        BindPagingGrid2();
    }

    /// <summary>
    /// Helper to bind the grid to the dynamic data
    /// </summary>
    private void BindPagingGrid2()
    {
        PagingGridView2.DataSource = GetDataPage(PagingGridView2.PageIndex, PagingGridView2.PageSize, PagingGridView2.CustSortExpression);
        PagingGridView2.DataBind();
    }

    private int GetRowCount()
    {
        using (SqlConnection conn = new SqlConnection(demoConnString))
        {
            conn.Open();
            SqlCommand comm = new SqlCommand(@"SELECT COUNT(*) FROM " + demoTableName, conn);
            int count = Convert.ToInt32(comm.ExecuteScalar());
            conn.Close();
            return count;
        }
    }

    private DataTable GetDataPage(int pageIndex, int pageSize, string sortExpression)
    {
        using (SqlConnection conn = new SqlConnection(demoConnString))
        {
            // We always need a default sort field for ROW_NUMBER() to work correctly
            if (sortExpression.Trim().Length == 0)
                sortExpression = demoTableDefaultOrderBy;

            conn.Open();
            // This shows an example of how we can retrieve a block of records using ROW_NUMBER()
            // For example, pageIndex=3, pageSize=20 so the record we want to display is row 61-80
            // the resultant SQL will have an inner select that retrieve "TOP 80" rows, the outer 
            // select than filter out all the row <= 60 through "ROW_NUM > 60" expression to return
            // the 20 records (row 61-80 )
            string commandText = string.Format("SELECT * FROM (select TOP {0} ROW_NUMBER() OVER (ORDER BY {1}) as ROW_NUM, *  " +
                                                "FROM {2} ORDER BY ROW_NUM) innerSelect WHERE ROW_NUM > {3}",
                                                ((pageIndex + 1) * pageSize),
                                                sortExpression,
                                                demoTableName,
                                                (pageIndex * pageSize));
            SqlDataAdapter adapter = new SqlDataAdapter(commandText, conn);
            DataTable dt = new DataTable();
            adapter.Fill(dt);
            conn.Close();
            dt.Columns.Remove("ROW_NUM");
            return dt;
        }
     */
    #endregion
}


