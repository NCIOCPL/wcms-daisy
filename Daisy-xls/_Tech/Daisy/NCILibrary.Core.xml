<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCILibrary.Core</name>
    </assembly>
    <members>
        <member name="T:NCI.Text.MarkupExtensionProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionProcessor._instance">
            <summary>
            The singleton instance of the markup extension processor.
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionProcessor._syncObject">
            <summary>
            An object instance to use for locking access to _instance.
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionProcessor._markupExtensionRegex">
            <summary>
            A regular expression that matches instances of markup extension tags 
            of the following basic form:
            
            {mx:Namespace.Name(parameter 1|parameter 2|...|parameter N)}
            
            As an example, here is what a date formatting tag might look like:
            
            {mx:HtmlHelper.Date(today|yyyy.mm.dd)}
            
            Regex Logic
            ---------------------------------------------------------------------------------------
            Match a {
            Match zero or more whitespace characters
            Match me
            Match zero or more whitespace characters
            Match :
            Match zero or more whitespace characters
            Begin a match group called "name"
            Match the fully qualified name of the tag
            Close the "name" match group
            Match zero or more whitespace characters
            
            At this point have something like "{mx:Namespace.Name" 
            or "{ me    :  Namespace.Name "
            
            (1) Main Ending
            
            Match (
            Begin a match group called "parameters"
            Match zero or more of anything but )
            Close the "parameters" match group
            Match )
            
            
            (2) Alternate Ending for parameterless tag without explicitly specified empty 
            parenthesis 
            
            Match }
            ---------------------------------------------------------------------------------------
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionProcessor._handlers">
            <summary>
            Maintains a lookup table of "Namespace.Function" markup extension tag names to 
            a delegate that returns an instance of a markup extension tag handler.  
            For example, a markup extension with tag {mx:HtmlHelper.Date()} would have an 
            entry mapping the string "HtmlHelper.Date" to delegate that when invoked returns 
            an instance of the MarkupExtensions.DateProcessor type.
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionProcessor._enabled">
            <summary>
            Determines if the processor should actually process the input text to the process method.  
            This value is true by default and can be set via configuration so that if something breaks 
            or there is horrible performance and we wanted to turn it off we can do so without changing 
            any code.
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionProcessor._returnHandlerErrorsAsOutput">
            <summary>
            </summary>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.#ctor">
            <summary>
            Do nothing constructor to prevent instantiation outside the singleton instance.
            </summary>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.Initialize">
            <summary>
            Loads delegates that create markup extension handlers for all configured markup 
            extensions.  Delegates are stored in a dictionary so new instances of markup 
            extension handlers can be created to handler processing.
            </summary>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.GetParameters(System.String)">
            <summary>
            Gets individual parameters from a parameter string.
            </summary>
            <param name="parameterString">A raw parameter string with pipe separators, e.g. "Parameter 1|Parameter 2|...|Parameter N."</param>
            <returns>An array of each individual parameter value.</returns>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.GetErrorOutput(System.String)">
            <summary>
            In the case of an exception, we either want to display the error output 
            i.e. the Message property on the exception (so in a preview environment 
            the user can see what went wrong) or an empty string (so in a live 
            environment the page doesn't have errors displayed - it will still be 
            broken since content will just be "missing" but the end user won't see 
            an unprocessed tag or an error message).
            
            There is no exception handling in this method since it should not be 
            possible for this method to throw exceptions.
            </summary>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.Process(System.String,System.String[])">
            <summary>
            Converts an instance of a markup extension to formatted output text.  
            If any exceptions or error conditions occur (like not finding the 
            requested markup extenstion processor by name) error output is returned 
            instead.  Under no circumstances should this method raise an exception 
            up to the calling code.  The only thing not protected by the try/catch 
            are calls to GetErrorOutput which is designed to not throw exceptions.
            </summary>
            <param name="name">The tag name of the markup extension, e.g. HtmlHelpers.Date.</param>
            <param name="parameters">The parameters specified in the markup extension tag.</param>
            <returns>Formatted text to replace the markup extension.</returns>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.GetReplacementTextForMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the formatted output for the markup extension tag found by the passed in match.
            
            There is no exception handling in this method since it should not be 
            possible for this method to throw exceptions.  If a match has been 
            passed in, it will have matched the regex and therefore the Match and 
            the two named groups will all be non-null.  In the case where the tag 
            had no parameters, the parameterString will be empty string.  The called 
            GetParameters method is designed to not throw exceptions as is the Process 
            method (although in this case there is a try/catch that covers the entire 
            method.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:NCI.Text.MarkupExtensionProcessor.Process(System.String)">
            <summary>
            Parses an entire stream of text, such as a full HTML document, finds all 
            markup extension tags and processes them by replacing with formatted text.
            
            There is no exception handling in this method since it should not be 
            possible for this method to throw exceptions.  The only call made is to 
            Regex.Replace(string, MatchEvaluator) which according to MSDN documentation 
            only throws ArgumentNullException exceptions if the string or MatchEvaluator 
            are null.  We explicitly check the string is not null and the evaluator is a 
            delegate to a method on this object so it cannot be null.  The only other 
            way an exception could happen is if the MatchEvaluator method itself threw 
            an exception and that should not be possible either.
            </summary>
            <param name="textWithMarkupExtensions">Raw text containing markup extension tags.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="P:NCI.Text.MarkupExtensionProcessor.Instance">
            <summary>
            Provides access to the singleton instance, lazy initializing the markup extensions 
            when first accessed.
            </summary>
        </member>
        <member name="M:NCI.Messaging.MSMQSender.AddToQueue(System.Object)">
            <summary>
            Adds a new object to the current Message Queue as the Body propery of a Message object.
            </summary>
            <param name="nciMessage"></param>
        </member>
        <member name="M:NCI.Messaging.MSMQSender.AddToQueue(System.Object,System.String)">
            <summary>
            Adds a new object to the current Message Queue as the Body propery of a Message object.
            </summary>
            <param name="body"></param>
            <param name="label"></param>
        </member>
        <member name="T:NCI.Data.UsesSProcAttribute">
            <summary>
            This is an attribute to give to methods of a query class to document the stored procedure that it calls.
            </summary>
        </member>
        <member name="M:NCI.Data.UsesSProcAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of a UsesSProcAttribute class
            </summary>
            <param name="procName">The name of the stored procedure that is called</param>
        </member>
        <member name="P:NCI.Data.UsesSProcAttribute.ProcName">
            <summary>
            Gets the name of the stored procedure that is called
            </summary>
        </member>
        <member name="M:NCI.Util.XmlStrings.Clean(System.Xml.XmlNode)">
            <summary>
            Returns a Trimmed String passed in as an XmlNode, null if the node is null
            </summary>
            <param name="node">The node to be converted into a string</param>
            <returns>The trimmed string if it != null or empty, otherwise returns null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.Clean(System.Xml.XmlNode,System.String)">
            <summary>
            Trims the contents of an XmlNode and returns a string
            </summary>
            <param name="node">The node to be converted into a string</param>
            <param name="defValue">The string to be returned if the contents of the node is empty</param>
            <returns>The trimmed string if it != null or empty, otherwise returns defValue</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.Clean(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Trims the contents of an XmlNode and returns a string
            </summary>
            <param name="node">The node to be converted into a string</param>
            <param name="defValue">The string to be returned if the contents of the node is empty</param>
            <returns></returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.Clean(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Trims the contents of an XmlNode and returns a string
            </summary>
            <param name="node">The node to be converted into a string</param>
            <param name="defValue">the default value to be returned incase trim fails</param>
            <param name="preserveEmptyStrings">determines if EmptryStrings shold be preserved</param>
            <returns>The trimmed string if it != null or empty, otherwise returns default value</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ContainsChildXMLElements(System.Xml.XmlNode)">
            <summary>
            Determines if the node contains Child Elements
            </summary>
            <param name="node">The node to be converted</param>
            <returns>true if it contains child elements, false otherwise</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToInt(System.Xml.XmlNode)">
            <summary>
            Converts an XmlNode to Int
            </summary>
            <param name="node">The XmlNode to be converted</param>
            <returns>The integer if XmlNode is != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToInt(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts an XmlNode to Int
            </summary>
            <param name="node">The XmlNode to be converted, throwError signifies if error should be thrown incase of invalid object</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if XmlNode is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToInt(System.Xml.XmlNode,System.Int32)">
            <summary>
            Converts an XmlNode to Int
            </summary>
            <param name="node">The XmlNode to be converted</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <returns>The integer if XmlNode is != null,  otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToInt(System.Xml.XmlNode,System.Int32,System.Boolean)">
            <summary>
            Converts an XmlNode to Int
            </summary>
            <param name="obj">The XmlNode to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if XmlNode is != null,error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToUInt(System.Xml.XmlNode)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="node">The object to be converted</param>
            <returns>The integer if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToUInt(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="node">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToUInt(System.Xml.XmlNode,System.UInt32)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="node">The object to be converted</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <returns>The integer if object is != null, otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToUInt(System.Xml.XmlNode,System.UInt32,System.Boolean)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="node">The object to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if object is != null, error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToLong(System.Xml.XmlNode)">
            <summary>
            Converts an XmlNode to long
            </summary>
            <param name="node">The XmlNode to be converted</param>
            <returns>The long if XmlNode is != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToLong(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts an XmlNode to long
            </summary>
            <param name="node">The XmlNode to be converted, throwError signifies if error should be thrown incase of invalid object</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Int64 value if XmlNode is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToLong(System.Xml.XmlNode,System.Int64)">
            <returns>The Int64 value if XmlNode is != null,  otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToLong(System.Xml.XmlNode,System.Int64,System.Boolean)">
            <summary>
            Converts an XmlNode to long
            </summary>
            <param name="node">The XmlNode to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the Int64 returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Int64 value if XmlNode is != null,error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToGuid(System.Xml.XmlNode)">
            <summary>
            Converts an XmlNode to a Guid
            </summary>
            <param name="node">The node to be converted</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToGuid(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts an XmlNode to a Guid
            </summary>
            <param name="node">The node to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToGuid(System.Xml.XmlNode,System.Guid)">
            <summary>
            Converts an XmlNode to a Guid
            </summary>
            <param name="node">The node to be converted</param>
            <param name="defValue">defValue siginfies the default value for the Guid returned</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToGuid(System.Xml.XmlNode,System.Guid,System.Boolean)">
            <summary>
            Converts an XmlNode to a Guid
            </summary>
            <param name="node">The object to be converted</param>
            <param name="defValue">defValue siginfies the default value for the Guid returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToDateTime(System.Xml.XmlNode)">
            <summary>
            Converts an XmlNode to a DateTime
            </summary>
            <param name="node"></param>
            <returns>The DateTime value is object != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToDateTime(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Converts an XmlNode to a DateTime
            </summary>
            <param name="node"></param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The DateTime value if node != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToDateTime(System.Xml.XmlNode,System.DateTime)">
            <summary>
            Converts an XmlNode to a DateTime
            </summary>
            <param name="node"></param>
            <param name="defValue">defValue siginfies the default value for the DateTime returned</param>
            <returns>The DateTime value if node != null</returns>
        </member>
        <member name="M:NCI.Util.XmlStrings.ToDateTime(System.Xml.XmlNode,System.DateTime,System.Boolean)">
            <summary>
            Converts an XmlNode to a DateTime
            </summary>
            <param name="node"></param>
            <param name="defValue">defValue siginfies the default value for the DateTime returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The DateTime value if node != null</returns>
        </member>
        <member name="T:NCI.Util.NCILoggingException">
            <summary>
            This Class has behaviour that raises Exceptions raised on performing logging operations.
            </summary>
        </member>
        <member name="M:NCI.Util.NCILoggingException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NCI.Util.NCILoggingException.#ctor(System.String)">
            <summary>
            Constructor that takes Log Message as Argument
            </summary>
            <param name="msg">The message passed into the Custom Exception.</param>
        </member>
        <member name="M:NCI.Util.NCILoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that takes Log Message and Exception objects as Arguments
            </summary>
            <param name="msg">The message passed into the Custom Exception.</param>
            <param name="innerException">The inner Exception for the Custom Exception.</param>
        </member>
        <member name="M:NCI.Logging.Providers.NCILoggingProvider.WriteToLog(System.String,System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Writes out the ErrorMessage to the implemented Provider, using the facility, message, errorLevel and Exception variables passed in as parameters
            </summary>
            <param name="facility">facility of the errormessage</param>
            <param name="message">friendly message logged using the provider</param>
            <param name="errorLevel">Clear, Debug, Info, Error, Critical, Warning or All NCIErrorLevel</param>
            <param name="ex">Exception object to be used by the provider</param>
        </member>
        <member name="M:NCI.Logging.Providers.NCILoggingProvider.WriteToLog(System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Writes out the ErrorMessage to the implemented Provider, using the facility, errorLevel and Exception variables passed in as parameters
            </summary>
            <param name="facility">facility of the errormessage</param>
            <param name="errorLevel">Clear, Debug, Info, Error, Critical, Warning or All NCIErrorLevel</param>
            <param name="ex">Exception object to be used by the provider</param>
        </member>
        <member name="M:NCI.Logging.Providers.NCILoggingProvider.WriteToLog(System.String,System.String,NCI.Logging.NCIErrorLevel)">
            <summary>
            Writes out the ErrorMessage to the implemented Provider, using the facility, message and errorLevel variables passed in as parameters
            </summary>
            <param name="facility">facility of the errormessage</param>
            <param name="message">friendly message logged using the provider</param>
            <param name="errorLevel">Clear, Debug, Info, Error, Critical, Warning or All NCIErrorLevel</param>
        </member>
        <member name="T:NCI.Util.ConvertEnum`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NCI.Util.ConvertEnum`1.Convert(System.Object)">
            <summary>
            Convert a string embedded in an Object to an enumerated value.  If a null object
            or an empty string is passed, an InvalidCastException is thrown.
            </summary>
            <param name="obj">an Object encapsulating the string representation of
            an enumerated value.</param>
            <returns>An enumerated value of type T</returns>
        </member>
        <member name="M:NCI.Util.ConvertEnum`1.Convert(System.Object,`0)">
            <summary>
            Convert a string embedded in an Object to an enumerated value.  If a null object
            or an empty string is passed, defaultValue is returned.  Likewise, invalid values are also
            converted to defaultValue.
            </summary>
            <param name="obj">an Object encapsulating the string representation of
            an enumerated value.</param>
            <param name="defaultValue">The value to return if obj is null or contains an empty string.</param>
            <returns></returns>
        </member>
        <member name="M:NCI.Util.ConvertGeneral`1.Convert(System.Object,`0)">
            <summary>
            Convert a string embedded in an Object to an enumerated value.  If a null object
            or an empty string is passed, defaultValue is returned.
            </summary>
            <param name="obj">an Object encapsulating the string representation of
            a value of type T.</param>
            <param name="defaultValue">The value to return if obj is null or contains an empty string.</param>
            <returns></returns>
        </member>
        <member name="M:NCI.Util.ConvertGeneral`1.ArrayToString(`0[],System.Int32)">
            <summary>
            Converts an array of values of type T into an array of strings containing comma-delimited
            lists of the values.  It is the caller's responsibility to guarantee that type T provides
            a meaningful implementation of ToString().
            </summary>
            <param name="values">An array of values</param>
            <param name="maxStringSize">The maximum character count in a single string.
            (Note: Values larger than maxStringSize are not split across multiple strings.</param>
            <returns>An array of comma-delimited strings</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NCI.Web.FlashHandler" -->
        <member name="M:NCI.Web.FlashHandler.Process(System.String[])">
            <summary>
            
            </summary>
            <param name="parameters">
            
            TODO-v.NEXT: get this info into attribute:
            
            Index   Param                   Requirements
            0       id                      Non-empty string
            1       flashSrc                Non-empty string
            2       flashWidth              Number > 0
            3       flashHeight             Number > 0
            4       requiredFlashVersion    Non-empty string
            5       Flash Variables         string
            6       Flash Parameters        string
            7       Flash Object Attributes string
            
            TODO-v.NEXT: get error/log text from custom attribute data for param name and requirements?  Don't want to use reflection in general practice with these but maybe ok in case of exception since that shouldn't happen in production.
            </param>
            <returns></returns>
        </member>
        <member name="P:NCI.Web.FlashHandler.HasSWFObjectBeenLoaded">
            <summary>
            Gets a value indicating if the SWFObject javascript code has been loaded yet.
            </summary>
        </member>
        <member name="T:NCI.Logging.Providers.NCILoggingProviderConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:NCI.Logging.Providers.NCILoggingProviderConfiguration.Providers">
            <summary>
            
            </summary>
        </member>
        <member name="P:NCI.Logging.Providers.NCILoggingProviderConfiguration.DefaultProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.LoggingHelper.Initialize">
            <summary>
            Initilizes the configuration Section.
            </summary>
        </member>
        <member name="M:NCI.Logging.LoggingHelper.LogToLastResort(System.Exception)">
            <summary>
            This logs any errors to a file specified in the logging config.
            </summary>
            <param name="ex">The exception to be logged</param>
        </member>
        <member name="M:NCI.Logging.LoggingHelper.GetLevelsFromString(System.String)">
            <summary>
            Parses the string passed in and return the ErrorLevel
            </summary>
            <param name="s">String containting the error level.</param>
            <returns>The Error Level of the string passed in.</returns>
        </member>
        <member name="M:NCI.Logging.LoggingHelper.LogError(System.String,System.String,NCI.Logging.NCIErrorLevel)">
            <param name="errorLevel">The error level of the message.</param>
            <param name="message">Description of the Error Message.</param>
            <param name="facility">Description of the facility of the Error Message.</param>
        </member>
        <member name="M:NCI.Logging.LoggingHelper.LogError(System.String,System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Logs the Error Mesaage.
            </summary>
            <param name="message">Description of the Error Message.</param>
            <param name="facility">Description of the facility of the Error Message.</param>
            <param name="errorLevel">Specifies the level of Error Messages.</param>
            <param name="ex">Actual Exception object.</param>
        </member>
        <member name="M:NCI.Logging.LoggingHelper.LogError(System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Logs the Error Mesaage.
            </summary>
            <param name="facility">Description of the facility of the Error Message.</param>
            <param name="errorLevel">Specifies the level of Error Messages.</param>
            <param name="ex">Actual Exception object.</param>
        </member>
        <member name="P:NCI.Logging.LoggingHelper.Instance">
            <summary>
            Gets an instance of the LoggingHelper class.
            </summary>
        </member>
        <member name="M:NCI.Util.Strings.Clean(System.Object)">
            <summary>
            Returns a Trimmed String passed in as an object, null if object is null
            </summary>
            <param name="obj">The object to be trimmed</param>
            <returns>The trimmed string if it != null or empty, otherwise returns null</returns>
        </member>
        <member name="M:NCI.Util.Strings.Clean(System.Object,System.Boolean)">
            <summary>
            Returns a Trimmed String passed in as an object, null if object is null
            </summary>
            <param name="obj">The object to be trimmed</param>
            <param name="preserveEmptyStrings">determines if EmptryStrings shold be preserved</param>
            <returns>The trimmed string if it != null or empty, otherwise returns null</returns>
        </member>
        <member name="M:NCI.Util.Strings.Clean(System.Object,System.String)">
            <summary>
            Returns a Trimmed String passed in as an object, null if object is null
            </summary>
            <param name="obj">The string to be trimmed</param>
            <param name="defValue">the default value to be returned incase trim fails</param>
            <returns>The trimmed string if it != null or empty, otherwise returns defValue</returns>
        </member>
        <member name="M:NCI.Util.Strings.Clean(System.Object,System.String,System.Boolean)">
            <summary>
            Returns a Trimmed String passed in as an object, null if object is null
            </summary>
            <param name="obj">The string to be trimmed</param>
            <param name="defValue">the default value to be returned incase trim fails</param>
            <param name="preserveEmptyStrings">determines if EmptryStrings shold be preserved</param>
            <returns>The trimmed string if it != null or empty, otherwise returns defValue</returns>
        </member>
        <member name="M:NCI.Util.Strings.Wrap(System.Object,System.Int32,System.String)">
            <summary>
            Wraps the object and returns the string
            </summary>
            <param name="obj">object,charwidth and wrapchar</param>
            <param name="charWidth">charwidth</param>
            <param name="wrapChar">wrapchar</param>
            <returns>the wrapped string</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToStringArray(System.Object)">
            <summary>
            Converts the object to an array of strings assuming the original object is a string representing a comma-separated list of items.
            </summary>
            <param name="obj">object needed to be converted to an array of strings</param>
            <returns>the array of strings or null if null argument</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToStringArray(System.Object,System.String)">
            <summary>
            Converts the object to an array of strings
            </summary>
            <param name="obj">object needed to be converted to an array of strings</param>
            <param name="separator">the separator</param>
            <returns>the array of strings or null if null argument</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToStringArray(System.Object,System.Boolean)">
            <summary>
            Converts the object to an array of strings
            </summary>
            <param name="obj">object needed to be converted to an array of strings, along with the throwerror flag, for invalid and null objects</param>
            <param name="throwError">the error to be thrown in case of an invalid object</param>
            <returns>the array of strings or null if null argument</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToStringArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts the object to an array of strings
            </summary>
            <param name="obj">object needed to be converted to an array of strings</param>
            <param name="throwError">the error to be thrown in case of an invalid object</param>
            <param name="separator">the separator</param>
            <returns>the array of strings or null if null argument</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToInt(System.Object)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The integer if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToInt(System.Object,System.Boolean)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToInt(System.Object,System.Int32)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <returns>The integer if object is != null, otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToInt(System.Object,System.Int32,System.Boolean)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if object is != null, error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToIntArray(System.Object)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToIntArray(System.Object,System.String)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToIntArray(System.Object,System.Boolean)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted, throwerror determines if error to be thrown for invalid or null object</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToIntArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted,along with the separator,throwerror determines if error to be thrown for invalid or null object</param>
            <param name="separator">the separator</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToIntArray(System.String[])">
            <summary>
            Converts an array of strings to array of Ints
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToIntArray(System.String[],System.Boolean)">
            <summary>
            Converts an Array of Strings to an Array of Integers
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of integers if starr is != null,error if throwError is true</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUInt(System.Object)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The integer if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUInt(System.Object,System.Boolean)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUInt(System.Object,System.UInt32)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <returns>The integer if object is != null, otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUInt(System.Object,System.UInt32,System.Boolean)">
            <summary>
            Converts an Object to Int
            </summary>
            <param name="obj">The object to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The integer if object is != null, error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUIntArray(System.Object)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUIntArray(System.Object,System.String)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUIntArray(System.Object,System.Boolean)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted, throwerror determines if error to be thrown for invalid or null object</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUIntArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts an Object to array of Ints
            </summary>
            <param name="obj">The object to be converted,along with the separator,throwerror determines if error to be thrown for invalid or null object</param>
            <param name="separator">the separator</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUIntArray(System.String[])">
            <summary>
            Converts an array of strings to array of Ints
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <returns>The array of integers if object is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToUIntArray(System.String[],System.Boolean)">
            <summary>
            Converts an Array of Strings to an Array of Integers
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of integers if starr is != null,error if throwError is true</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLong(System.Object)">
            <summary>
            Converts an Object to long
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The long value if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLong(System.Object,System.Boolean)">
            <summary>
            Converts an Object to long
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The long value if object is != null, otherwise throws an exception</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLong(System.Object,System.Int64)">
            <summary>
            Converts an Object to long
            </summary>
            <param name="obj">The object to be converted, defValue siginfies the default value for the int returned</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <returns>The long if object is != null, otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLong(System.Object,System.Int64,System.Boolean)">
            <summary>
            Converts an Object to long
            </summary>
            <param name="obj">The object to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The long value if object is != null, error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLongArray(System.String[])">
            <summary>
            Converts an array of strings to an array of longs
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <returns>The array of Longs if starr is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLongArray(System.String[],System.Boolean)">
            <summary>
            Converts an Array of Strings to an Array of Integers
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of Longs if starr is != null,error if throwError is true</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLongArray(System.Object)">
            <summary>
            Converts an object to an Array of longs
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The array of Longs</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLongArray(System.Object,System.String)">
            <summary>
            Converts an object to an Array of longs
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <returns>The Array of Longs if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLongArray(System.Object,System.Boolean)">
            <summary>
            Converts an object to an Array of longs
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of Longs if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToLongArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts an object to an Array of longs
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of Long if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloat(System.Object)">
            <summary>
            Converts an Object to float
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The float value if object is != null and is a float, otherwise returns float.NaN.</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloat(System.Object,System.Boolean)">
            <summary>
            Converts an Object to float
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The float value if object is != null and is a float. Otherwise if <em>throwError</em> is <c>true</c> 
            throws a NCIStringConversionFailedException exception, if <c>false</c> it returns float.NaN. </returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloat(System.Object,System.Single)">
            <summary>
            Converts an Object to float
            </summary>
            <param name="obj">The object to be converted, defValue siginfies the default value for the int returned</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <returns>The float if object is != null, otherwise returns the default value</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloat(System.Object,System.Single,System.Boolean)">
            <summary>
            Converts an Object to float
            </summary>
            <param name="obj">The object to be converted, defValue and throwError</param>
            <param name="defValue">defValue siginfies the default value for the int returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The float value if object is != null, error if throwError is true,default value if throwError is false</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloatArray(System.String[])">
            <summary>
            Converts an array of strings to an array of floats
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <returns>The array of Floats if starr is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloatArray(System.String[],System.Boolean)">
            <summary>
            Converts an Array of Strings to an Array of Integers
            </summary>
            <param name="starr">The array of strings to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The array of Floats if starr is != null,error if throwError is true</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloatArray(System.Object)">
            <summary>
            Converts an object to an Array of floats
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The array of Floats</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloatArray(System.Object,System.String)">
            <summary>
            Converts an object to an Array of floats
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <returns>The Array of Floats if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloatArray(System.Object,System.Boolean)">
            <summary>
            Converts an object to an Array of floats
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of Floats if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToFloatArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts an object to an Array of floats
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of Float if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuid(System.Object)">
            <summary>
            Converts an object to a Guid
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuid(System.Object,System.Boolean)">
            <summary>
            Converts an object to a Guid
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuid(System.Object,System.Guid)">
            <summary>
            Converts an object to a Guid
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="defValue">defValue siginfies the default value for the Guid returned</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuid(System.Object,System.Guid,System.Boolean)">
            <summary>
            Converts an object to a Guid
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="defValue">defValue siginfies the default value for the Guid returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Guid value if obj is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuidArray(System.String[])">
            <summary>
            Converts an Array of strings to an Array of Guids
            </summary>
            <param name="obj">The Array of strings to be converted</param>
            <returns>The Array of Guids if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuidArray(System.String[],System.Boolean)">
            <summary>
            Converts an Array of strings to an Array of Guids
            </summary>
            <param name="obj">The Array of strings to be converted</param>
            <returns>The Array of Guids if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuidArray(System.Object)">
            <summary>
            Converts an object to an Array of Guids
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The Array of Guids if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuidArray(System.Object,System.String)">
            <summary>
            Converts an object to an Array of Guids
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <returns>The Array of Guids if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuidArray(System.Object,System.Boolean)">
            <summary>
            Converts an object to an Array of Guids
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of Guids if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToGuidArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts an object to an Array of Guids
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of Guids if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTime(System.Object)">
            <summary>
            Converts an object to a DateTime
            </summary>
            <param name="obj">The object to be converted</param>
            <returns>The DateTime value is object != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTime(System.Object,System.Boolean)">
            <summary>
            Converts an object to a DateTime
            </summary>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <param name="obj">The object to be converted</param>
            <returns>The DateTime value is object != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTime(System.Object,System.DateTime)">
            <summary>
            Converts an object to a DateTime
            </summary>
            <param name="defValue">defValue siginfies the default value for the DateTime returned</param>
            <returns>The DateTime value is object != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTime(System.Object,System.DateTime,System.Boolean)">
            <summary>
            Converts an object to a DateTime
            </summary>
            <param name="defValue">defValue siginfies the default value for the DateTime returned</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The DateTime value is object != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTimeArray(System.Object,System.Boolean)">
            <summary>
            Converts an object to an Array of DateTimes
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of DateTimes if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTimeArray(System.Object)">
            <summary>
            Converts an Array of strings to an Array of DateTime Values
            </summary>
            <returns>The DateTime value if the Array of strings != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTimeArray(System.String[])">
            <summary>
            Converts an Array of strings to an Array of DateTime Values
            </summary>
            <returns>The DateTime value if the Array of strings != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTimeArray(System.String[],System.Boolean)">
            <summary>
            Converts an Array of strings to an Array of DateTime Values
            </summary>
            <returns>The DateTime value if the Array of strings != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToDateTimeArray(System.Object,System.String,System.Boolean)">
            <summary>
            Converts an object to an Array of DateTimes
            </summary>
            <param name="obj">The object to be converted</param>
            <param name="separator">the separator</param>
            <param name="throwError">throwError signifies if error should be thrown incase of invalid object</param>
            <returns>The Array of DateTimes if Array of strings is != null</returns>
        </member>
        <member name="M:NCI.Util.Strings.ToBoolean(System.Object)">
            <summary>
            Converts an Object to Bool
            </summary>
            <param name="obj">The object to converted to bool</param>
            <returns></returns>
        </member>
        <member name="M:NCI.Util.Strings.ToBoolean(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts an Object to Bool
            </summary>
            <param name="obj">The object to converted to bool</param>
            <param name="defValue">The default value of the boolean value returned from the function, incase the object is not coverted.</param>
            <param name="throwError">Determines if an error should be thrown incase of an Exception on converting the object to boolean</param>
            <returns></returns>
        </member>
        <member name="M:NCI.Util.Strings.StringMatchesPattern(System.String,System.String,System.Boolean)">
            <summary>
            Determines if a string matches a simple wildcard pattern
            </summary>
            <param name="stringToMatch">The string to match</param>
            <param name="pattern">The match pattern</param>
            <param name="ignoreCase">Make the comparison case-insensitive</param>
            <returns></returns>
        </member>
        <member name="M:NCI.Util.Strings.IfNull(System.String,System.String)">
            <summary>
            Substitutes default string for a null string
            </summary>
            <param name="val">Test string</param>
            <param name="valDefault">Default string</param>
            <returns>Test string or default string</returns>
        </member>
        <member name="M:NCI.Util.Strings.StripHTMLTags(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:NCI.Text.MarkupExtensionLoader">
            <summary>
            Provides access to a dictionary of delegates that create MarkupExtensionLoaders 
            keyed by the name of the markup extension.
            </summary>
        </member>
        <member name="F:NCI.Text.MarkupExtensionLoader._handlers">
            <summary>
            Stores the mapping of a normalized (lowered) markup extension name to the delegate 
            that can create an instance of a MarkupExtensionHandler.
            </summary>
        </member>
        <member name="M:NCI.Text.MarkupExtensionLoader.#ctor">
            <summary>
            Protected constructor that is called when derived classes are created.  Calls the 
            abstract LoadHandlers method so derived classes can add handlers to the _handlers 
            dictionary.
            </summary>
        </member>
        <member name="M:NCI.Text.MarkupExtensionLoader.Add(System.Func{NCI.Text.MarkupExtensionHandler})">
            <summary>
            Allows derived classes to add handlers to the internal _handlers dictionary, 
            normalizing the markup extension name to be lower case.
            </summary>
            <param name="name">
            The name of the markup extension as used in the tag, e.g. HtmlHelpers.Date.
            </param>
            <param name="handlerDelegate">
            A delegate that returns an instance of a MarkupExtensionHandler capable of processing 
            the named markup extension.
            </param>
        </member>
        <member name="M:NCI.Text.MarkupExtensionLoader.LoadHandlers">
            <summary>
            Abstract method to be implemented by derived types.  Derived types should call the 
            the "Add" method on this class to add all the handlers they manage.
            </summary>
        </member>
        <member name="M:NCI.Text.MarkupExtensionLoader.GetHandlers">
            <summary>
            Provides access to the internal _handlers dictionary.
            </summary>
            <returns>A dictionary with the mapping of markup extension name to handler delegate</returns>
        </member>
        <member name="T:NCI.Messaging.NCIMessagingException">
            <summary>
            Represents error that occurs during messaging execution
            </summary>
        </member>
        <member name="T:NCI.Logging.Providers.EventLogProvider">
            <summary>
            This class writes to the EventLog any error messages that the Client needs.
            </summary>
        </member>
        <member name="F:NCI.Logging.Providers.EventLogProvider.logsource">
            <summary>
            The log source
            </summary>
        </member>
        <member name="M:NCI.Logging.Providers.EventLogProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the private variables in this class from the configuration file
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="T:NCI.Util.NCILoggingConfigurationException">
            <summary>
            This Class has behaviour that raises Exceptions raised on performing logging operations due to Configuration issues.
            </summary>
        </member>
        <member name="M:NCI.Util.NCILoggingConfigurationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NCI.Util.NCILoggingConfigurationException.#ctor(System.String)">
            <summary>
            Constructor that takes Log Message as Argument.
            </summary>
            <param name="msg">The message passed into the Custom Exception.</param>
        </member>
        <member name="M:NCI.Util.NCILoggingConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that takes Log Message and Exception objects as Arguments respectively.
            </summary>
            <param name="msg">The message passed into the Custom Exception.</param>
            <param name="innerException">The inner Exception for the Custom Exception.</param>
        </member>
        <member name="T:NCI.Logging.Sink">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.Sink.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.Sink.#ctor(System.String,NCI.Logging.NCIErrorLevel,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="errorLevels"></param>
            <param name="providerName"></param>
            <param name="matchStrings"></param>
        </member>
        <member name="M:NCI.Logging.Sink.DoesFacilityMatch(System.String)">
            <summary>
            Determines if the facility passed in as a string matches any of the patterns in the facilities specified in the configuration file
            </summary>
            <returns>Boolean value indicating if the facility passed in as a string matches any of the patterns in the facilities specified in the configuration file </returns>
        </member>
        <member name="P:NCI.Logging.Sink.Name">
            <summary>
            Nme of the Sink
            </summary>
        </member>
        <member name="P:NCI.Logging.Sink.ErrorLevels">
            <summary>
            ErrorLevels that apply to this Sink
            </summary>
        </member>
        <member name="P:NCI.Logging.Sink.ProviderName">
            <summary>
            The ProviderName that applies to this Sink
            </summary>
        </member>
        <member name="T:NCI.Logging.SinkCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.SinkCollection.GetProviderNamesByErrorAndFacility(System.String,NCI.Logging.NCIErrorLevel)">
            <summary>
            Returns an array of strings containing the ProviderNames by Error Level and Facility.
            </summary>
            <param name="facility">The facility for which ProviderNames are needed.</param>
            <param name="level">The ErrorLevel for which ProviderNames are needed.</param>
            <returns>An Array of string containing the ProviderNames</returns>
        </member>
        <member name="M:NCI.Logging.SinkCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.SinkCollection.GetSinksByErrorLevel(NCI.Logging.NCIErrorLevel)">
            <summary>
            Gets a Collection of Sinks based on the errorlevel passed in.
            </summary>
            <param name="level">The errorlevel passed in as a parameter</param>
            <returns>A Collection of Sinks</returns>
        </member>
        <member name="M:NCI.Logging.SinkCollection.GetSinksByFacility(System.String)">
            <summary>
            Gets a Collection of Sinks based on the facility passed in.
            </summary>
            <param name="facility">the facility passed in as a string</param>
            <returns>A collection of sinks</returns>
        </member>
        <member name="M:NCI.Logging.SinkCollection.GetProviderNames">
            <summary>
            Gets an Array of strings containing providernames
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCI.Web.HtmlHelperLoader">
            <summary>
            Provides access to a keyed collection of delegates that create generic markup extension 
            handlers.
            </summary>
        </member>
        <member name="M:NCI.Web.Extensions.WebExtensions.FindControlByType``1(System.Web.UI.Control)">
            <summary>
            Loops through the controls collection of a Control to find any child controls
            of type T.
            </summary>
            <remarks>
            This method does not support Control objects of type T which are nested inside 
            each other.  This method also follows all the normal rules of Control collections.
            </remarks>
            <typeparam name="T">The type of the control to find.</typeparam>
            <param name="ctrl"></param>
            <returns>A collection of Control objects which are of type T.</returns>
        </member>
        <member name="T:NCI.Text.MarkupExtensionHandlerAttribute">
            <summary>
            An attribute that allows MarkupExtensionHandlers to have documentation attached to them 
            that can be read at runtime.
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHashURL(System.String)">
            <summary>
            Returns obfuscated salt value and  hash code for salterd incoming 
            string created by SaltedHash.  Returns two field-value pairs 
            for adding to query strings consisting of field “a” that 
            contains the hash code and field “b” that contains the 
            obfuscated salt value. 
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHashURL(System.String,System.String)">
            <summary>
            Overload for SaltedHashURL that adds a test point 
            field-value pair to query string where field contains "TestPoint" 
            and value contains incoming testPointText. FOR TESTING.
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHashString(System.String)">
            <summary>
            Returns obfuscated salt value and  hash code for salterd incoming 
            string created by SaltedHash.  Returns a string containing a delimiter,
            the hash code for the salted incoming string, a delimiter, and the  
            obfuscated salt value. 
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHashCompoundString(System.String,System.String)">
            <summary>
            Returns a compound string containing a prefex and  the obfuscated salt value 
            and hash code for salterd incoming string created by SaltedHash.  
            Returns a string containing the prefix, a delimiter, the hash code for the 
            salted incoming string, a delimiter, and the obfuscated salt value. 
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHash(System.String,System.String@,System.String@)">
            <summary>
            Creates obfuscated salted hash code for salted incoming string.  
            Returns hashString that contains the hash code and 
            saltString that contains the obfuscated salt value. 
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHashCompareCompound(System.String,System.String,System.String@)">
            <summary>
            Unobfuscates hash code string and salt string with attached prefix created by 
            SaltedHashCompoundString then compares the unobfuscated hash code 
            with the locally generated hash  code for the salted string 
            incoming (using the unobfuscated salt string) and returns true if hash code match and false 
            if they do not.  It also return the output parameter prefix containing the unobfuscated prefix contained in saltedHashCompoundString
            </summary>
        </member>
        <member name="M:NCI.Core.HashMaster.SaltedHashCompare(System.String,System.String,System.String)">
            <summary>
            Unobfuscates hash code string and salt string created by 
            SaltedHashURL then compares the unobfuscated hash code 
            with the locally generated hash  code for the salted string 
            incoming and returns true if hash code match and false 
            if they do not.   
            </summary>
        </member>
        <member name="T:NCI.Util.NCIStringConversionFailedException">
            <summary>
            This Class has behaviour that raises Exceptions raised on converting Strings from various other types.
            </summary>
        </member>
        <member name="M:NCI.Util.NCIStringConversionFailedException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Util.NCIStringConversionFailedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg">The message passed into the Custom Exception.</param>
        </member>
        <member name="M:NCI.Util.NCIStringConversionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="msg">The message passed into the Custom Exception.</param>
            <param name="innerException">The inner Exception for the Custom Exception.</param>
        </member>
        <member name="M:NCI.Logging.Providers.NCILogging.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.Providers.NCILogging.Initialize">
            <summary>
            Initializes the Logging Providers specified in the web.config
            </summary>
        </member>
        <member name="M:NCI.Logging.Providers.NCILogging.WriteToLog(System.String,System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            
            </summary>
            <param name="facility"></param>
            <param name="message"></param>
            <param name="errorLevel"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NCI.Logging.Providers.NCILogging.WriteToLog(System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            
            </summary>
            <param name="facility"></param>
            <param name="errorLevel"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NCI.Logging.Providers.NCILogging.WriteToLog(System.String,System.String,NCI.Logging.NCIErrorLevel)">
            <summary>
            
            </summary>
            <param name="facility"></param>
            <param name="errorLevel"></param>
            <returns></returns>
        </member>
        <member name="P:NCI.Logging.Providers.NCILogging.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="P:NCI.Logging.Providers.NCILogging.Providers">
            <summary>
            
            </summary>
        </member>
        <member name="T:NCI.Web.DateHandler">
            <summary>
            Returns a formatted date.  Also serves as a base class for other 
            date processing handlers that want to support the same date formatting code.
            
            Index   Param                   Requirements
            0       DateFormat              Optional
            </summary>
        </member>
        <member name="M:NCI.Web.DateHandler.Process(System.String[])">
            <summary>
            TODO-v.NEXT: add optional timezone param?
            TODO-v.NEXT: put all format strings in Dictionary with corresponding value that goes in the .ToString() call so can use the .Keys colleciton in this method to validate they've passed in a valid format string?
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:NCI.Messaging.MSMQReceiver.OpenQueueAndReceive">
            <summary>
            Instantiates a new MessageQueue instance.
            </summary>
        </member>
        <member name="M:NCI.Messaging.MSMQReceiver.ReceiveCompletedEvent(System.Object,System.Messaging.ReceiveCompletedEventArgs)">
            <summary>
            Handles the Receive completed event of MessageQueue instance.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NCI.Messaging.MSMQReceiver.CloseQueue">
            <summary>
            Closes the current MessageQueue instance, frees the memory, and nullifies the member.
            </summary>
        </member>
        <member name="T:NCI.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient.
            </summary>
            <remarks>This is a modified version of Microsoft's Application Block</remarks>
        </member>
        <member name="M:NCI.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout"></param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwise is false.</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand with default Command Timeout (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand with default Command Timeout (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An int representing the number of rows affected by the command</returns>       
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param> 
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.String,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatatable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDatatable(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datatable containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.String,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteDatarow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataRow dr = ExecuteDatarow(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A datarow containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],NCI.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[],NCI.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandTimeout">The wait time in seconds before terminating the attempt to execute a command and generating an error</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:NCI.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:NCI.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:NCI.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String,System.Int32)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
            <param name="batchsize">Specifies a batchsize to the dataadapter, prevents roundtrips to the sql server.</param>
        </member>
        <member name="M:NCI.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure optional parameters to be provided.
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", __ASqlParameterArrayContainingParameters_);
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameters">An Array of SqlParmeters holding in the SqlParameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:NCI.Data.SqlHelper.CreateConnection(System.String)">
            <summary>
            This method creates a SqlConnection for you. 
            Use with care - the only time you should have to use it is for transactional operations.
            The connection returned is closed, and does not have an associated transaction.
            </summary>
            <param name="connectionString">The connection string to use.</param>
            <returns></returns>
        </member>
        <member name="T:NCI.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:NCI.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:NCI.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:NCI.Data.ParameterDiscovery">
            <summary>
            ParameterDiscovery provides functions to discover 
            parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:NCI.Data.ParameterDiscovery.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:NCI.Data.ParameterDiscovery.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:NCI.Data.ParameterDiscovery.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:NCI.Data.ParameterDiscovery.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:NCI.Data.ParameterDiscovery.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:NCI.Data.ParameterDiscovery.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:NCI.Logging.Providers.EmailProvider">
            <summary>
            This class sends out emails for any error messages that the Client needs.
            </summary>
        </member>
        <member name="F:NCI.Logging.Providers.EmailProvider._emailaddressfrom">
            <summary>
            The sender email address
            </summary>
        </member>
        <member name="F:NCI.Logging.Providers.EmailProvider._emailaddressesto">
            <summary>
            The Destination email address
            </summary>
        </member>
        <member name="M:NCI.Logging.Providers.EmailProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCI.Logging.Providers.EmailProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the private variables in this class from the configuration file
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:NCI.Logging.Providers.EmailProvider.WriteToLog(System.String,System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Sends the Error message out as an Email.
            </summary>
            <param name="facility">specifies the facility to match against facilities specified in configuration file.</param>
            <param name="message">error message passed in by the client</param>
            <param name="errorLevel">specifies the error level such as debug,warning</param>
            <param name="ex">exception variable required to be logged</param>
        </member>
        <member name="M:NCI.Logging.Providers.EmailProvider.WriteToLog(System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            
            </summary>
            <param name="facility">specifies the facility to match against facilities specified in configuration file.</param>
            <param name="errorLevel">specifies the error level such as debug,warning</param>
            <param name="ex">exception variable required to be logged</param>
        </member>
        <member name="M:NCI.Logging.Providers.EmailProvider.WriteToLog(System.String,System.String,NCI.Logging.NCIErrorLevel)">
            <summary>
            Sends the Error message out as an Email.
            </summary>
            <param name="facility">specifies the facility to match against facilities specified in configuration file.</param>
            <param name="message">error message passed in by the client</param>
            <param name="errorLevel">specifies the error level such as debug,warning</param>        
        </member>
        <member name="M:NCI.Logging.Providers.EmailProvider.SendEmail(System.String,System.String)">
            <summary>
            Sends out the Email for the Error Message that the client needs to send.
            </summary>
            <param name="Subject">Subject of the Email.</param>
            <param name="Body">Body of the Email.</param>
        </member>
        <member name="M:NCI.Web.NciUrl.SetUrl(System.String,System.Boolean)">
            <summary>
            This function will not make any chnages to url that is passed in. This value is 
            set as is on URIStem. This function alos does not perform any validation.
            </summary>
            <param name="url"></param>
            <param name="externalLink"></param>
        </member>
        <member name="M:NCI.Web.NciUrl.SetUrl(System.String)">
            <summary>
            Loads (or reloads) the data of the current instance's fields based on the passed in URL.
            </summary>
            <param name="uriString"></param>
        </member>
        <member name="M:NCI.Web.NciUrl.AppendPathSegment(System.String)">
            <summary>
            Appends a segment onto the end of an existing url path, handling "slash issues" so we 
            are sure we have one and only one slash.
            
            Note: you'd think Uri.TryCreate(new Uri("http://tempuri.org/path1"), "path2", out uri) 
            would result in a uri of http://tempuri.org/path1/path2 but it doens't.  Tnstead you 
            get http://tempuri.org/path2.  A trailing slash is required after "path1" to get the 
            expected result:
            
            Uri.TryCreate(new Uri("http://tempuri.org/path1"), "path2", out uri)
            true
            uri.ToString()
            "http://tempuri.org/path2"
            Uri.TryCreate(new Uri("http://tempuri.org/path1/"), "path2", out uri)
            true
            uri.ToString()
            "http://tempuri.org/path1/path2"
            
            So we have to ensure below that UriStem ends in slash or we have to 
            add it in manually.  
            
            The same issue exists with VirtualPathUtility.Combine():
            
            VirtualPathUtility.Combine("/path1", "path2")
            "/path2"
            VirtualPathUtility.Combine("/path1/", "path2")
            "/path1/path2"
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:NCI.Web.NciUrl.ToString">
            <summary>
            Returns a string version of the URL represented by the NciUrl instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCI.Logging.NCIErrorLevel">
            <summary>
            Specifies the level of Error Messages that should be logged.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.Clear">
            <summary>
            No Logging neccessary.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.Debug">
            <summary>
            Messages related to debugging.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.Info">
            <summary>
            Messages related to specific information.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.Warning">
            <summary>
            Warning Messages only.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.Error">
            <summary>
            All Error Messages.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.Critical">
            <summary>
            Complete Error Messages, such as failed database connectivitiy.
            </summary>
        </member>
        <member name="F:NCI.Logging.NCIErrorLevel.All">
            <summary>
            All messages for any level
            </summary>
        </member>
        <member name="T:NCI.Logging.Logger">
            <summary>
            Class contains Behaviour and properties related to Logging purposes within NCI.
            </summary>
        </member>
        <member name="M:NCI.Logging.Logger.LogError(System.String,System.String,NCI.Logging.NCIErrorLevel)">
            <summary>
            Logs Error to the provider by sending facility, message and NCIErrorLevel in the message.
            </summary>
            <param name="message">Description of the Error Message.</param>
            <param name="facility">Description of the facility of the Error Message.</param>
            <param name="level">Specifies the level of Error Messages.</param>
        </member>
        <member name="M:NCI.Logging.Logger.LogError(System.String,System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Logs Error to the provider by sending facility, message, NCIErrorLevel and Exception in the message.
            </summary>
            <param name="message">Description of the Error Message.</param>
            <param name="facility">Description of the facility of the Error Message.</param>
            <param name="level">Specifies the level of Error Messages.</param>
            <param name="ex">Actual Exception object.</param>
        </member>
        <member name="M:NCI.Logging.Logger.LogError(System.String,NCI.Logging.NCIErrorLevel,System.Exception)">
            <summary>
            Logs Error to the provider by sending facility,NCIErrorLevel and Exception in the message.
            </summary>
            <param name="facility">Description of the facility of the Error Message.</param>
            <param name="level">Specifies the level of Error Messages.</param>
            <param name="ex">Actual Exception object.</param>
        </member>
    </members>
</doc>
